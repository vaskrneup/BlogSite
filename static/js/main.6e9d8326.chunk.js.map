{"version":3,"sources":["components/navbar.jsx","pages/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","Home","useState","html","setHtml","hasError","useEffect","link","window","location","pathname","startsWith","document","getElementsByTagName","innerHTML","replace","initialTimer","forEach","msg","setTimeout","oldCounter","id","action","method","onSubmit","event","preventDefault","getElementById","type","width","placeholder","required","value","style","marginLeft","onClick","navigator","clipboard","writeText","then","r","alert","App","Boolean","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"ySAiBeA,MAbf,WACI,OACI,6BACI,wBAAIC,UAAU,oBAAd,SACA,wBAAIA,UAAU,cACV,4BAAI,uBAAGC,KAAK,KAAR,UACJ,4BAAI,uBAAGA,KAAK,KAAR,aACJ,4BAAI,uBAAGA,KAAK,KAAR,e,aCkFLC,MApFf,WAAiB,IAAD,EACYC,mBAAS,uDADrB,mBACLC,EADK,KACCC,EADD,OAEoBF,oBAAS,GAF7B,mBAELG,EAFK,KA8BZ,OA9BY,KAIZC,qBAAU,WATd,IAAkBC,GAWNC,OAAOC,SAASC,SAASC,WAAW,QAAUH,OAAOC,SAASC,SAASC,WAAW,SAX5EJ,EAYG,qBAXjBK,SAASC,qBAAqB,QAAQ,GAAGC,UAAY,yFACrDN,OAAOC,SAASM,QAAQR,IAapB,WACI,IAKIS,EAAe,IALH,CACZ,mCACA,4CACA,wDAIIC,SAAQ,SAACC,GACbC,YAAW,WACPf,EAAQc,KACTF,GAEHA,GAAgB,OAIxBI,KACD,IAGC,yBAAKrB,UAAU,QACX,6BACA,yBAAKA,UAAU,gBACX,4BAAKI,IAGT,6BACA,yBAAKJ,UAAU,4BACX,yEAEJ,6BACA,0BAAMA,UAAU,cAAcsB,GAAG,qBAAqBC,OAAO,GAAGC,OAAO,OAAOC,SAAU,SAACC,GACrFA,EAAMC,iBACNd,SAASe,eAAe,wBAExB,2BAAOC,KAAK,OAAO7B,UAAU,aAAa8B,MAAM,OAAOC,YAAY,kBAAkBC,UAAQ,IAC7F,2BAAOH,KAAK,OAAO7B,UAAU,aAAa8B,MAAM,OAAOE,UAAQ,EACxDD,YAAY,0DACnB,2BAAOF,KAAK,SAAS7B,UAAU,wBAAwBiC,MAAM,oBAC5D3B,EACG,oCACI,0BAAMN,UAAU,aAAhB,mFACA,yBAAKkC,MAAO,CAACC,WAAY,SACrB,wBAAInC,UAAU,aACV,4BAAI,+CACJ,4BAAI,gDACJ,4BAAI,iDAGZ,yBAAKA,UAAU,kBAEZ,GAINM,EAWG,OAVA,oCACI,0BAAM8B,QAAS,WACXC,UAAUC,UAAUC,UAAU,2BAA2BC,MAAK,SAAAC,GAAC,OAAIC,MAAM,kCAD7E,qBAII,0BAAMpB,GAAG,WAAT,4BAEJ,yBAAKtB,UAAU,qB,YCjD5B2C,MApBf,WACI,OACI,oCACI,gCAEI,kBAAC,EAAD,OAIJ,kBAAC,EAAD,QCXQC,QACW,cAA7BnC,OAAOC,SAASmC,UAEe,UAA7BpC,OAAOC,SAASmC,UAEhBpC,OAAOC,SAASmC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpC,SAASe,eAAe,SDyHpB,kBAAmBS,WACrBA,UAAUa,cAAcC,MACrBX,MAAK,SAAAY,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6e9d8326.chunk.js","sourcesContent":["import React from \"react\";\r\nimport '../css/navBar.css';\r\n\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav>\r\n            <h1 className=\"logo colorTheme4\">Vaskr</h1>\r\n            <ul className=\"nav__links\">\r\n                <li><a href=\"#\">ABOUT</a></li>\r\n                <li><a href=\"#\">PROJECTS</a></li>\r\n                <li><a href=\"#\">CONTACT</a></li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n","import React, {useState, useEffect} from 'react';\r\n\r\nimport '../css/pages/home.css'\r\n\r\nfunction redirect(link) {\r\n    document.getElementsByTagName(\"body\")[0].innerHTML = \"<h1 style='color:#989898;'>Please Wait, You will be redirected in few seconds...</h1>>\"\r\n    window.location.replace(link);\r\n}\r\n\r\nfunction Home() {\r\n    const [html, setHtml] = useState(\"Site is under construction, Please come back later.\")\r\n    const [hasError, setHasError] = useState(false)\r\n\r\n    useEffect(() => {\r\n        // for redirect !!\r\n        if (window.location.pathname.startsWith(\"/r-\") || window.location.pathname.startsWith(\"r-\")) {\r\n            redirect(\"https://google.com\")\r\n        }\r\n\r\n        function oldCounter() {\r\n            const msgList = [\r\n                \"No wait, it's going to complete.\",\r\n                \"No it isn't, Come back later ðŸ˜‚\",\r\n                \"Thanks for coming, hope to see you soon ðŸ˜Š\"\r\n            ];\r\n            let initialTimer = 5000;\r\n\r\n            msgList.forEach((msg) => {\r\n                setTimeout(() => {\r\n                    setHtml(msg);\r\n                }, initialTimer);\r\n\r\n                initialTimer += 5000;\r\n            });\r\n        }\r\n\r\n        oldCounter();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <br/>\r\n            <div className=\"home__header\">\r\n                <h1>{html}</h1>\r\n            </div>\r\n\r\n            <hr/>\r\n            <div className=\"home__header colorTheme4\">\r\n                <h1>But You may shorten your link right now.</h1>\r\n            </div>\r\n            <br/>\r\n            <form className=\"link_header\" id=\"linkSubmissionForm\" action=\"\" method=\"POST\" onSubmit={(event) => {\r\n                event.preventDefault();\r\n                document.getElementById(\"linkSubmissionForm\")\r\n            }}>\r\n                <input type=\"text\" className=\"link_input\" width=\"100%\" placeholder=\"Link to shorten\" required/>\r\n                <input type=\"text\" className=\"link_input\" width=\"100%\" required\r\n                       placeholder=\"Shortened Link (After https://vaskr.ml/r-<YOUR LINK>)\"/>\r\n                <input type=\"submit\" className=\"submit_btn link_input\" value=\"Shorten My Link\"/>\r\n                {hasError ? (\r\n                    <>\r\n                        <span className=\"error_msg\">Seems like we have some error (Please Correct the info before submitting again)</span>\r\n                        <div style={{marginLeft: \"30px\"}}>\r\n                            <ul className=\"error_msg\">\r\n                                <li><small>First Error</small></li>\r\n                                <li><small>Second Error</small></li>\r\n                                <li><small>Third Error</small></li>\r\n                            </ul>\r\n                        </div>\r\n                        <div className=\"borderBottom\">\r\n                        </div>\r\n                    </>) : \"\"\r\n                }\r\n                {/*Must be replaced !!*/}\r\n                {\r\n                    !hasError && true ? (\r\n                        <>\r\n                            <span onClick={() => {\r\n                                navigator.clipboard.writeText(\"https://vaskr.ml/r-haha\").then(r => alert(\"Link copied to clipboard.\"))\r\n                            }}>\r\n                                Your New Link is \"\r\n                                <span id=\"newLink\">https://vaskr.ml/r-haha</span>\r\n                            </span>\r\n                            <div className=\"borderBottom\">\r\n                            </div>\r\n                        </>\r\n                    ) : \"haha\"\r\n                }\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","// inbuilt modules !!\nimport React from 'react';\n\n// components !!\n// -- custom components\nimport Navbar from \"./components/navbar\";\nimport Home from \"./pages/Home\";\n\n// static files !!\n// -- css files !!\nimport \"./css/App.css\";\nimport \"./css/common.css\";\n// import Projects from \"./pages/Projects\";\n\nfunction App() {\n    return (\n        <>\n            <header>\n                {/* Navbar Related */}\n                <Navbar/>\n            </header>\n\n            {/*    HOME RELATED !!*/}\n            <Home/>\n            {/*    END HOME RELATED !!*/}\n\n            {/*    PROJECT RELATED !!  */}\n            {/*<Projects/>*/}\n            {/*    END PROJECT RELATED !!*/}\n\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}